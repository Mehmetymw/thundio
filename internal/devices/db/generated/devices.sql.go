// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package generated

import (
	"context"
	"time"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (name, type, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateDeviceParams struct {
	Name      string
	Type      string
	Status    DeviceStatus
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createDevice,
		arg.Name,
		arg.Type,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, name, type, status, created_at, updated_at
FROM devices
WHERE id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDevices = `-- name: ListDevices :many
SELECT id, name, type, status, created_at, updated_at
FROM devices
`

func (q *Queries) ListDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDevicesByStatus = `-- name: ListDevicesByStatus :many
SELECT id, name, type, status, created_at, updated_at
FROM devices
WHERE status = $1
`

func (q *Queries) ListDevicesByStatus(ctx context.Context, status DeviceStatus) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listDevicesByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeviceStatus = `-- name: UpdateDeviceStatus :exec
UPDATE devices
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdateDeviceStatusParams struct {
	ID        int32
	Status    DeviceStatus
	UpdatedAt time.Time
}

func (q *Queries) UpdateDeviceStatus(ctx context.Context, arg UpdateDeviceStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateDeviceStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
