// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package generated

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type DeviceStatus string

const (
	DeviceStatusActive       DeviceStatus = "Active"
	DeviceStatusInactive     DeviceStatus = "Inactive"
	DeviceStatusMaintenance  DeviceStatus = "Maintenance"
	DeviceStatusFaulty       DeviceStatus = "Faulty"
	DeviceStatusDisconnected DeviceStatus = "Disconnected"
)

func (e *DeviceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeviceStatus(s)
	case string:
		*e = DeviceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeviceStatus: %T", src)
	}
	return nil
}

type NullDeviceStatus struct {
	DeviceStatus DeviceStatus
	Valid        bool // Valid is true if DeviceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeviceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeviceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeviceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeviceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeviceStatus), nil
}

type Device struct {
	ID        int32
	Name      string
	Type      string
	Status    DeviceStatus
	CreatedAt time.Time
	UpdatedAt time.Time
}
